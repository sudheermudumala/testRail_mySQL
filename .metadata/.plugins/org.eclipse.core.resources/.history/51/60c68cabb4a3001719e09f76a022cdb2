package com;

import java.util.List;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import java.sql.*;

import org.json.JSONArray;
import org.json.JSONObject;

public class testRail {

	String planSql, runSql, resultSql;
	String testPlan_id, testRun_id, testResult_id;
	ArrayList arrTestRun = new ArrayList();
	
	
	public static void main(String args[]) throws Exception{
		testRail tr = new testRail();
		tr.uploadPlanRun();
	//	tr.dbConnect();
		tr.uploadResults();
		tr.uploadIterations();

	//	tr.getResults();
	}
	
	public String getStatus(String intStatus){
		
		String strStatus=null;
		
		switch(intStatus){
		
		case "1" : strStatus = "Passed";
		break;
		
		case "2" : strStatus = "Blocked";
		break;
		
		case "3" : strStatus = "Untested";
		break;
		
		case "4" : strStatus = "Retest";
		break;
		
		case "5" : strStatus = "failed";
		break;
		
		case "6" : strStatus = "Not Applicable";
		break;
		
		case "7" : strStatus = "automated";
		break;
		
		case "8" : strStatus = "Can't Automate";
		break;
		
		case "9" : strStatus = "Can't Automate";
		break;
		
		}
		
		return strStatus;
	}
	
	public String getJson(String url){
		String json_response = new String();
		 
		try{
			StringBuffer response;
			
			URL obj = new URL(url);
			HttpURLConnection con = (HttpURLConnection) obj.openConnection();
			String userCredentials = "sudheer.mudumala.contractor@weather.com:@lt12345";
			
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString((userCredentials).getBytes());
		
			con.setRequestProperty ("Authorization", basicAuth);
			con.setRequestMethod("GET");
			con.setRequestProperty("Content-Type", "application/json");
			
			 con.setRequestProperty("User-Agent", "Mozilla/5.0");
			 		     
		     BufferedReader in = new BufferedReader(
		             new InputStreamReader(con.getInputStream()));
		     String inputLine;
		     response = new StringBuffer();
		     while ((inputLine = in.readLine()) != null) {
		     	response.append(inputLine);
		     }
		     in.close();
		     
		   json_response = response.toString();
		
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return json_response;
	}
	
	public void dbConnect(){
		
		ResultSet rs;
		
		try{
	
			Class.forName("com.mysql.jdbc.Driver");
			Connection con=DriverManager.getConnection("jdbc:mysql://18.221.129.98/","bigweb","cash-power-flies");  
			
			Statement stmt=con.createStatement();  
			
			System.out.println(planSql);
			stmt.executeUpdate(planSql);
			System.out.println("Inserted into Plan Table");
			
			rs=stmt.executeQuery("select max(id) from bigweb_automation.test_plan;");
			rs.first();
			testPlan_id=rs.getString(1);
			System.out.println(testPlan_id);
			
			runSql = runSql.replace("testPlanid", testPlan_id);
			System.out.println(runSql);
			stmt.executeUpdate(runSql);
			
			con.close();  
			
		}catch(Exception e){System.out.println(e);}
		
	}
	
	public void dbInsert(String sqlQuery){
		try{
			Class.forName("com.mysql.jdbc.Driver");
			Connection con=DriverManager.getConnection("jdbc:mysql://18.221.129.98/","bigweb","cash-power-flies");  
			Statement stmt=con.createStatement();  
			stmt.executeUpdate(sqlQuery);
			con.close();	
		}catch(Exception e){System.out.println(e);}
	}
	
	public String dbGetId(String sqlQuery){
		
		ResultSet rs;
		String dbId=null;
		try{
			Class.forName("com.mysql.jdbc.Driver");
			Connection con=DriverManager.getConnection("jdbc:mysql://18.221.129.98/","bigweb","cash-power-flies");  
			Statement stmt=con.createStatement();  
			rs = stmt.executeQuery(sqlQuery);
			rs.first();
			dbId = rs.getString(1);
			con.close();	
		}catch(Exception e){System.out.println(e);}
		
		return dbId;
	}
	
	public ArrayList dbGetTestCases(String sqlQuery){
		ResultSet rsTestCases = null;
		ArrayList<String> alTestCases = new ArrayList<String>();
		try{
			Class.forName("com.mysql.jdbc.Driver");
			Connection con=DriverManager.getConnection("jdbc:mysql://18.221.129.98/","bigweb","cash-power-flies");  
			Statement stmt=con.createStatement();  
			rsTestCases = stmt.executeQuery(sqlQuery);
			while(rsTestCases.next()){
				alTestCases.add(rsTestCases.getInt(1));
			}
			rsTestCases.close();
			con.close();	
		}catch(Exception e){System.out.println(e);}
		return alTestCases;
	}
	
	public void uploadPlanRun() {
		try{
			
			String url = "https://twcqa.testrail.com/index.php?/api/v2/get_plan/16270";
			     
		    String json_response = getJson(url);
		    
		    JSONObject planObj = new JSONObject(json_response);
		    
		    planSql = "INSERT INTO bigweb_automation.test_plan (test_plan_id,test_plan_url,name) VALUES (";
		    
		    planSql += planObj.get("id").toString() + ",";
		    planSql += "\"" + planObj.get("url").toString() + "\"" + ",";
		    planSql += "\"" + planObj.get("name").toString() + "\"" ;
		    planSql +=  ");";

		    
		    runSql = "INSERT INTO bigweb_automation.test_run (test_run_id, test_run_url, name,test_plan_id) VALUES";
		    JSONArray arrEntries = (JSONArray) planObj.get("entries");
		    for(int i=0;i<arrEntries.length();i++){
		    	
		    	JSONObject objEntries = arrEntries.getJSONObject(i);
		    	
		    	JSONArray arrRuns = (JSONArray) objEntries.get("runs");
		    	
		    	JSONObject objRuns = arrRuns.getJSONObject(0);
		    	runSql += "("  + objRuns.get("id")  + ",";
		    	runSql += "\""  + objRuns.get("url") + "\"" + ",";
		    	runSql += "\"" + objRuns.get("name") + "\"" + "," ;
		    	runSql += "testPlanid" + ")";
		    	
		    	arrTestRun.add(objRuns.get("id"));
		    	
		    }
		    
		    runSql = runSql.replace(")(","),(") + ";" ;
		    //System.out.println(runSql);
		    	
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}
	
	public void uploadResults(){
		String run_id = null;
		try{
			
			Iterator<Integer> itrTestRun = arrTestRun.iterator();
			while (itrTestRun.hasNext()){
				
				int runId = itrTestRun.next();
				
				String url = "https://twcqa.testrail.com/index.php?/api/v2/get_tests/" + runId;
				String json_response = getJson(url);
				JSONArray testArr = new JSONArray(json_response);
				
				resultSql = "INSERT INTO bigweb_automation.test_result (test_case_id,name,status,test_run_id) VALUES ";
				
				for(int j=0;j<testArr.length();j++){
					JSONObject testObj = testArr.getJSONObject(j);
					
					resultSql+= "(" + testObj.get("case_id").toString();
					resultSql+= "," + "\"" + testObj.get("title").toString().replace("\"", "'") + "\"";
					resultSql+= "," + "\"" + getStatus(testObj.get("status_id").toString()) + "\"";
					resultSql+= "," + "runId";
					resultSql+= ")";
				}
				resultSql = resultSql.replace(")(","),(") + ";" ;	
				run_id = dbGetId("select max(id) from bigweb_automation.test_run where test_run_id = "+ runId + ";");
				resultSql = resultSql.replace("runId", run_id);
			
				//dbInsert(resultSql);
			}
		}catch(Exception e){e.printStackTrace();}
	}

	public void uploadIterations(){
		
		String strGetTestCase; 
		Integer intTestRunId;
		ArrayList<String> alTestCase = new ArrayList<String>();
		try{
			Iterator<Integer> itrTestRun = arrTestRun.iterator();
			while (itrTestRun.hasNext()){
				intTestRunId = itrTestRun.next();
				strGetTestCase = "select test_case_id from bigweb_automation.test_result where test_run_id in (select id from bigweb_automation.test_run where test_run_id = " + intTestRunId + ")";
				alTestCase = dbGetTestCases(strGetTestCase);
				Iterator<String> itrTestCase = alTestCase.iterator();
				while (itrTestCase.hasNext()){ 
					System.out.println(itrTestCase.next());
				}
			}
		}catch(Exception e) {e.printStackTrace();}
		
	}
	
	
}
